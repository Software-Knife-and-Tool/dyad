;;;  SPDX-FileCopyrightText: Copyright 2017-2022 James M. Putnam (putnamjm.design@gmail.com)
;;;  SPDX-License-Identifier: MIT

;;;
;;; core format
;;;
(mu:intern core::ns :extern "format"
   (:lambda (stream fmt args)
     (core:errorp-unless core:stringp fmt "core:format: not a string")
     (core:errorp-unless core:listp args "core:format: not a list")
     ((:lambda (dest fmt-len fmt-op)
        (:if (core:zerop fmt-len)
              (:if stream
                   ""
                   ())
              ((:lambda ()
                 (mu:fix*
                  (:lambda (self nth args)
                    (:if (mu:eq nth fmt-len)
                         dest
                         ((:lambda (ch)
                            (:if (mu:eq ch #\~)
                                 ((:lambda ()
                                    (core:error-if (mu:eq (core:1+ nth) fmt-len) nth "core:format: end of string while processing directive")
                                    (mu:fr-setv (core::fn-frame-id self) 2 (fmt-op (core:schar fmt (core:1+ nth)) dest args))
                                    (mu:fr-setv (core::fn-frame-id self) 1 (mu:fixnum+ 2 nth))))
                                 (core::prog2
                                    (core:write-char ch dest)
                                    (mu:fr-setv (core::fn-frame-id self) 1 (core:1+ nth)))))
                          (core:schar fmt nth))))
                  (core::list2 0 args))
                 (:if (core:null stream)
                      (core:get-output-stream-string dest)
                      ())))))
       (:if (core:null stream)
            (mu:open :string :output "")
            (:if (mu:eq stream :t)
                 mu:std-out
                 (:if (core:streamp stream)
                      stream
                      (core:error stream "core:format: not a stream designator"))))
       (core:length fmt)
       (:lambda (dir dest args)
         (:if (mu:eq dir #\~)
              (core::prog2 (core:write-char #\~ dest) args)
              (:if (mu:eq dir #\%)
                   (core::prog2 (core:terpri dest) args)
                   (:if (mu:eq dir #\D)
                        ((:lambda ()
                           (core:errorp-unless core:fixnump (mu:car args) "format: argument to ~D not a fixnum")
                           (core:write (mu:car args) () dest)
                           (mu:cdr args)))
                        (:if (mu:eq dir #\X)
                             ((:lambda (fx)
                                (core:errorp-unless core:fixnump fx "format: argument to ~X not a fixnum")
                                (core:errorp-when (:lambda (n) (mu:fixnum< n 0)) fx "format: argument to ~X is negative")
                                (:if (core:zerop fx)
                                     (core:write "0" () dest)
                                     ((:lambda (loop)
                                        ((:lambda (lst)
                                           (core:mapc (:lambda (ch) (core:write ch () dest))
                                                      (mu:nthcdr (core:positionl
                                                                  (:lambda (item elt)
                                                                    (core:null (mu:eq item elt)))
                                                                  #\0
                                                                  lst)
                                                                 lst)))
                                           (loop loop fx 14)))
                                      (:lambda (loop fx nth)
                                        (:if (core:zerop nth)
                                             ()
                                             (core::append (loop loop (core:ash fx -4) (core:1- nth))
                                                           (core::list (core:schar "0123456789abcdef" (mu:logand fx #xf))))))))
                                (mu:cdr args))
                              (mu:car args))
                             (:if (mu:eq dir #\A)
                                  (core::prog2 (core:write (mu:car args) () dest) (mu:cdr args))
                                  (:if (mu:eq dir #\S)
                                       (core::prog2 (core:write (mu:car args) :t dest) (mu:cdr args))
                                       (core:error dir "core:format: unrecognized format directive")))))))))))
