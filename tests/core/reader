#
# core reader tests
#
assert_eq "(mu:type-of core:in-namespace)" ":func"
assert_eq "(mu:type-of core:read)" ":func"
# symbols
assert_eq "(core:read (core:make-string-stream :input \"a\") () ())" "core:a"
assert_eq "(core:read (core:make-string-stream :input \"core:a\") () ())" "core:a"
assert_eq "(core:read (core:make-string-stream :input \"abc\") () ())" "core:abc"
assert_eq "(core:read (core:make-string-stream :input \"core:abc\") () ())" "core:abc"
assert_eq "(core:read (core:make-string-stream :input \"abcdefgh\") () ())" "core:abcdefgh"
assert_eq "(core:read (core:make-string-stream :input \"core:abcdefgh\") () ())" "core:abcdefgh"
# quoted forms
assert_eq "(core:read (core:make-string-stream :input \"'a\") () ())" "(:quote core:a)"
assert_eq "(core:read (core:make-string-stream :input \"'core:a\") () ())" "(:quote core:a)"
assert_eq "(core:read (core:make-string-stream :input \"'abc\") () ())" "(:quote core:abc)"
assert_eq "(core:read (core:make-string-stream :input \"'core:abc\") () ())" "(:quote core:abc)"
assert_eq "(core:read (core:make-string-stream :input \"'abcdefgh\") () ())" "(:quote core:abcdefgh)"
assert_eq "(core:read (core:make-string-stream :input \"'core:abcdefgh\") () ())" "(:quote core:abcdefgh)"
# chars
assert_eq "(core:read (core:make-string-stream :input \"#\\a\") () ())" "#\\a"
assert_eq "(core:read (core:make-string-stream :input \"#\\ \") () ())" "#\\space"
assert_eq "(core:read (core:make-string-stream :input \"#\\)\") () ())" "#\\)"
# numbers
assert_eq "(core:read (core:make-string-stream :input \"0\") () ())" "0"
assert_eq "(core:read (core:make-string-stream :input \"+0\") () ())" "0"
assert_eq "(core:read (core:make-string-stream :input \"-0\") () ())" "0"
assert_eq "(core:read (core:make-string-stream :input \"1024\") () ())" "1024"
assert_eq "(core:read (core:make-string-stream :input \"-1024\") () ())" "-1024"
assert_eq "(core:read (core:make-string-stream :input \"+1024\") () ())" "1024"
assert_eq "(core:read (core:make-string-stream :input \"1.024\") () ())" "1.024000"
assert_eq "(core:read (core:make-string-stream :input \"#b10101100\") () ())" "172"
assert_eq "(core:read (core:make-string-stream :input \"#d1024\") () ())" "1024"
assert_eq "(core:read (core:make-string-stream :input \"#xabc\") () ())" "2748"
assert_eq "(core:read (core:make-string-stream :input \"#xabcdef\") () ())" "11259375"
# lists
assert_eq "(core:read (core:make-string-stream :input \"()\") () ())" ":nil"
assert_eq "(core:read (core:make-string-stream :input \"(())\") () ())" "(:nil)"
assert_eq "(core:read (core:make-string-stream :input \"(() ())\") () ())" "(:nil :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(123 ())\") () ())" "(123 :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(() 123 )\") () ())" "(:nil 123)"
assert_eq "(core:read (core:make-string-stream :input \"(a () )\") () ())" "(core:a :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(a ())\") () ())" "(core:a :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(a() )\") () ())" "(core:a :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(a())\") () ())" "(core:a :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(()a)\") () ())" "(:nil core:a)"
assert_eq "(core:read (core:make-string-stream :input \"(()a )\") () ())" "(:nil core:a)"
assert_eq "(core:read (core:make-string-stream :input \"(a b )\") () ())" "(core:a core:b)"
assert_eq "(core:read (core:make-string-stream :input \"(abc ())\") () ())" "(core:abc :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(() abc )\") () ())" "(:nil core:abc)"
assert_eq "(core:read (core:make-string-stream :input \"(:a :b )\") () ())" "(:a :b)"
assert_eq "(core:read (core:make-string-stream :input \"(:a :b)\") () ())" "(:a :b)"
assert_eq "(core:read (core:make-string-stream :input \"(:abc ())\") () ())" "(:abc :nil)"
assert_eq "(core:read (core:make-string-stream :input \"(() :abc )\") () ())" "(:nil :abc)"
assert_eq "(core:read (core:make-string-stream :input \"(1 2 )\") () ())" "(1 2)"
assert_eq "(core:read (core:make-string-stream :input \"(1 . 2 )\") () ())" "(1 . 2)"
assert_eq "(core:read (core:make-string-stream :input \"(1 . 2 )\") () ())" "(1 . 2)"
assert_eq "(core:read (core:make-string-stream :input \"(1 2 . 3 )\") () ())" "(1 2 . 3)"
assert_eq "(core:read (core:make-string-stream :input \"((1 2 ) . 3 )\") () ())" "((1 2) . 3)"
assert_eq "(core:read (core:make-string-stream :input \"((1 2 ) . (3 4 ) )\") () ())" "((1 2) 3 4)"
