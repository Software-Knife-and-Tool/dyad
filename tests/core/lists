#
# core list tests
#
assert_eq "(mu:type-of core::append)" ":func"
assert_eq "(mu:type-of core:dropl)" ":func"
assert_eq "(mu:type-of core:dropr)" ":func"
assert_eq "(mu:type-of core:elt)" ":func"
assert_eq "(mu:type-of core:findl-if)" ":func"
assert_eq "(mu:type-of core:findr-if)" ":func"
assert_eq "(mu:type-of core:foldl)" ":func"
assert_eq "(mu:type-of core:foldr)" ":func"
assert_eq "(mu:type-of core:last)" ":func"
assert_eq "(mu:type-of core:length)" ":func"
assert_eq "(mu:type-of core:mapc)" ":func"
assert_eq "(mu:type-of core:mapcar)" ":func"
assert_eq "(mu:type-of core:mapl)" ":func"
assert_eq "(mu:type-of core:maplist)" ":func"
assert_eq "(mu:cdr (core:assoc #\\a '((#\\a . foo))))" "foo"
assert_eq "(mu:cdr (core:assoc #\\a ()))" ":nil"
assert_eq "(core:append '((1 2 3) (4 5 6)))" "(1 2 3 4 5 6)"
assert_eq "(core:append '((1 2 3) ()))" "(1 2 3)"
assert_eq "(core:append '(() (1 2 3)))" "(1 2 3)"
assert_eq "(core:append '((1 2) 3))" "(1 2 . 3)"
assert_eq "(core:append '(() ()))" ":nil"
assert_eq "(core:dropl '(1 2 3) 0)" "(1 2 3)"
assert_eq "(core:dropl '(1 2 3) 1)" "(2 3)"
assert_eq "(core:dropr '(1 2 3) 0)" "(1 2 3)"
assert_eq "(core:dropr '(1 2 3) 1)" "(1 2)"
assert_eq "(core:mapc (:lambda (el) el) '(1 2 3))" "(1 2 3)"
assert_eq "(core:mapc (:lambda (el) el) '(1))" "(1)"
assert_eq "(core:mapc (:lambda (el) el) ())" ":nil"
assert_eq "(core:mapcar (:lambda (el) el) '(1 2 3))" "(1 2 3)"
assert_eq "(core:mapcar (:lambda (el) el) '(1))" "(1)"
assert_eq "(core:mapcar (:lambda (el) el) ())" ":nil"
assert_eq "(core:mapl (:lambda (el) el) '(1 2 3))" "(1 2 3)"
assert_eq "(core:mapl (:lambda (el) el) '(1))" "(1)"
assert_eq "(core:mapl (:lambda (el) el) ())" ":nil"
assert_eq "(core:maplist (:lambda (el) el) '(1 2 3))" "((1 2 3) (2 3) (3))"
assert_eq "(core:maplist (:lambda (el) el) '(1))" "((1))"
assert_eq "(core:maplist (:lambda (el) el) ())" ":nil"
assert_eq "(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))" ":nil"
assert_eq "(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))" ":t"
assert_eq "(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1 2 3))" "(3 2 1)"
assert_eq "(core:foldr (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))" "6"
assert_eq "(core:sv-list \"abc\")" "(a b c)"
#