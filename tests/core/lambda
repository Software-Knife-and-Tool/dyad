#
# core lambda tests
#
assert_eq "(mu:type-of core::closure)" ":func"
assert_eq "(mu:type-of core::compile-application)" ":func"
assert_eq "(mu:type-of core::compile-closure)" ":func"
assert_eq "(mu:type-of core::compile-lambda)" ":func"
assert_eq "(mu:type-of core::compile-lambda-body)" ":func"
assert_eq "(mu:type-of core::compile-symbol)" ":func"
assert_eq "(mu:type-of core::core-lambda)" ":func"
assert_eq "(mu:type-of core::symbol-frame)" ":func"
assert_eq "(mu:apply (core:compile '(lambda () 1)) ())" "1"
assert_eq "(mu:apply (core:compile '(lambda (a b) (core:null b))) '(1 2))" ":nil"
assert_eq "(mu:apply (core:compile '(lambda (a b) (mu:fx-add 1 2))) '(1 2))" "3"
assert_eq "(mu:apply (core:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))" "3"
assert_eq "(mu:apply (core:compile '(lambda (a b) (mu:write b () mu:std-out))) '(1 2))" "22"
assert_eq "(mu:apply (core:compile '(lambda (a b) (mu:type-of b))) '(1 2))" ":fixnum"
assert_eq "(core::apply (core:compile '(lambda ())) ())" ":nil"
assert_eq "(core::apply (core:compile '(lambda () 1)) ())" "1"
assert_eq "(core::apply (core:compile '(lambda (a) a)) '(1))" "1"
assert_eq "(core::apply (core:compile '(lambda (a) 1)) '(2))" "1"
assert_eq "(core::apply (core:compile '(lambda (a b) 1)) '(2 3))" "1"
assert_eq "(core::apply (core:compile '(lambda (a b) (core:fixnump b))) '(1 2))" ":t"
assert_eq "(core::apply (core:compile '(lambda (a b) (core:null b))) '(1 2))" ":nil"
assert_eq "(core::apply (core:compile '(lambda (a b) (mu:fx-add 1 2))) '(1 2))" "3"
assert_eq "(core::apply (core:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))" "3"
assert_eq "(core::apply (core:compile '(lambda (a b) (mu:write b () mu:std-out))) '(1 2))" "22"
assert_eq "(core::apply (core:compile '(lambda (a b) (mu:type-of b))) '(1 2))" ":fixnum"
assert_eq "(core::apply (core:compile '(lambda (&rest e) e)) '(1 2 3 4 5))" "(1 2 3 4 5)"
assert_eq "(core::apply (core:compile '(lambda (a &rest e) e)) '(1 2 3 4 5))" "(2 3 4 5)"
assert_eq "(core::apply (core:compile '(lambda (a b &rest e) e)) '(1 2 3 4 5)))" "(3 4 5)"
assert_eq "(core::apply (core:compile '(lambda (a b c &rest e) e)) '(1 2 3 4 5))" "(4 5)"
assert_eq "(core::apply (core:compile '(lambda (a b c d &rest e) e)) '(1 2 3 4 5))" "(5)"
assert_eq "(core::apply (core:compile '(lambda (a b c d e &rest f) f)) '(1 2 3 4 5))" ":nil"
assert_eq "(mu:type-of (core::apply (core:compile '(lambda (a) (a))) (mu:cons (:lambda () 1) ())))" ":fixnum"
assert_eq "(mu:eval (core:compile '((lambda (a &rest b) (a b)) mu:car 1 2 3)))" "1"
assert_eq "(mu:eval (core:compile '((lambda (a &rest b) (a b)) mu:car (mu:fx-add 2 1) 2 1)))" "3"
assert_eq "(mu:eval (core:compile '((lambda (a &rest b) (a b)) mu:car ())))" ":nil"